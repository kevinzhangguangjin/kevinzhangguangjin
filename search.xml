<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Excel建立机器学习评分模型</title>
      <link href="/2019/07/25/an-excel-machine-learning-approach-for-score-modeing/"/>
      <url>/2019/07/25/an-excel-machine-learning-approach-for-score-modeing/</url>
      
        <content type="html"><![CDATA[<h1 id="使用Excel建立机器学习评分模型"><a href="#使用Excel建立机器学习评分模型" class="headerlink" title="使用Excel建立机器学习评分模型"></a>使用Excel建立机器学习评分模型</h1><p>准备写一份材料关于《使用Excel建立机器学习评分模型》，成型的Excel模板已经有了（笔者自己开发的），具体的一些效果截屏见文末。就是不知道有多少人愿意了解？</p><p>以下是材料大纲：</p><h2 id="为什么使用Excel"><a href="#为什么使用Excel" class="headerlink" title="为什么使用Excel"></a>为什么使用Excel</h2><ul><li><p>Excel的普遍性</p><blockquote><p>微软：2016年3月Office用户量超12亿</p></blockquote><p>根据微软官方公布的数字显示，Office的全球用户量达到了12亿，而Excel是Office中常用的套件工具。</p></li><li><p>计算性能</p><blockquote><p>Office Excel 2016 中包含 100 万行和 16,000 列的“大网格”，加上多项其他上限被调高，与 Excel 先前版本相比极大地增加了你可创建的工作表的大小。 Excel 中单个工作表可包含的单元格数现达到先前版本的 1,000 倍以上。</p></blockquote><p>本案例需要 Office 2007 或以上版本。</p></li><li><p>其他优点</p><ul><li><p>不用写代码</p><p>没有代码编程要求，只需要理解公式</p></li><li><p>更直观</p><p>Excel自带的表格以及图表能更清晰展示数据和模型</p></li><li><p>解释性强</p><p>案例采用Logistic Regression算法，并结合评分模型方法论。该方法论完整贯穿并展示模型的有效性、区分度、稳定性。数据变量对模型的贡献，以及能结合实际商业业务的理解。</p></li></ul></li><li><p>文章范围</p><ul><li><p>使用一个数据案例</p><p>拟采用GermanCredit数据集（文末截屏是另外一个数据集）</p></li><li><p>全部使用Excel实现模型建立过程</p><p>不需要额外的软件辅助，建模全流程都在Excel内完成</p></li></ul></li></ul><h2 id="关于Logistic-Regression"><a href="#关于Logistic-Regression" class="headerlink" title="关于Logistic Regression"></a>关于Logistic Regression</h2><ul><li>线性模型</li><li>Logistic Regression</li></ul><h2 id="Excel-步骤实现"><a href="#Excel-步骤实现" class="headerlink" title="Excel 步骤实现"></a>Excel 步骤实现</h2><ul><li>模型方法论<ul><li>Binning</li><li>WOE</li><li>IV</li><li>Odds</li><li>KS</li></ul></li><li>理解数据</li><li>观察数据</li><li>建模步骤</li></ul><h2 id="模型监控"><a href="#模型监控" class="headerlink" title="模型监控"></a>模型监控</h2><ul><li>PSI</li><li>排序性</li></ul><p>无图无真相：</p><ul><li><p>可以交互看到Binning表现</p><p><img src="/images/image-20190725164506141.png" alt></p></li><li><p>可以看到评分结果评价</p><p><img src="/images/image-20190725164744585.png" alt></p></li><li><p>按照标准评分卡参数设置，得到的变量每个属性的分</p><p><img src="/images/image-20190725164948390.png" alt></p></li></ul><p>还有别的一些特点没有放出来，看大家有没有兴趣了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> machine learning </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow 升级到2.0，那么项目的1.x程序怎么办？</title>
      <link href="/2019/07/25/tensorflow-2-0-how-to-do-with-your-code/"/>
      <url>/2019/07/25/tensorflow-2-0-how-to-do-with-your-code/</url>
      
        <content type="html"><![CDATA[<h1 id="TensorFlow-升级到2-0，那么项目的1-x程序怎么办？"><a href="#TensorFlow-升级到2-0，那么项目的1-x程序怎么办？" class="headerlink" title="TensorFlow 升级到2.0，那么项目的1.x程序怎么办？"></a>TensorFlow 升级到2.0，那么项目的1.x程序怎么办？</h1><p>目前，Tensorflow库正在经历着从推出以来最大规模的变化。TensorFLow 2.0 已经推出 beta 版本，同 TensorFlow 1.x 版本相比它带来了太多的改变。<strong>最大的问题在于不兼容了好多TensorFlow 1.x 版本的API。</strong></p><p>怎么办？</p><h2 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h2><p>虽然TensorFlow的2.0版本中，增加了很多光鲜靓丽的新功能。但是TensorFlow 1.x目前比较稳定，建议使用TensorFlow 1.x版本开发实际项目，并跟进2.x版本所更新的技术。等到2.x版本更为稳定的时候，才考虑将实际项目切换到2.x。</p><h2 id="应对方案"><a href="#应对方案" class="headerlink" title="应对方案"></a>应对方案</h2><p>TensorFlow框架的1.x版本与2.x版本差异较大。建议采用1.x与2.x版本共存的方式来解决。</p><h3 id="Anaconda创建虚拟环境"><a href="#Anaconda创建虚拟环境" class="headerlink" title="Anaconda创建虚拟环境"></a>Anaconda创建虚拟环境</h3><ul><li><p><strong>查看目前的虚拟环境</strong></p><p>使用<code>conda info --envs</code>查看当前环境信息</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># conda environments:</span><span class="token comment" spellcheck="true">#</span>base                  *  /anaconda3</code></pre><p>显示结果中可以看到，当前虚环境的名字是“base”，是Anaconda默认的Python环境。</p></li><li><p><strong>使用<code>python --version</code>来查看Python版本</strong></p><pre class=" language-bash"><code class="language-bash">Python 3.7.3</code></pre><p>可以知道，当前Python版本为3.7.3。</p></li><li><p><strong>创建Python虚拟环境</strong></p><p><code>conda create --name tf2 python=3.7.3</code></p><pre class=" language-bash"><code class="language-bash">The following packages will be downloaded:    package                    <span class="token operator">|</span>            build    ---------------------------<span class="token operator">|</span>-----------------    ca-certificates-2019.5.15  <span class="token operator">|</span>                0         133 KB    certifi-2019.6.16          <span class="token operator">|</span>           py37_0         154 KB    openssl-1.1.1c             <span class="token operator">|</span>       h1de35cc_1         3.4 MB    pip-19.1.1                 <span class="token operator">|</span>           py37_0         1.8 MB    setuptools-41.0.1          <span class="token operator">|</span>           py37_0         635 KB    sqlite-3.29.0              <span class="token operator">|</span>       ha441bb4_0         2.4 MB    wheel-0.33.4               <span class="token operator">|</span>           py37_0          39 KB    ------------------------------------------------------------                                           Total:         8.5 MBThe following NEW packages will be INSTALLED:  ca-certificates    pkgs/main/osx-64::ca-certificates-2019.5.15-0  certifi            pkgs/main/osx-64::certifi-2019.6.16-py37_0  libcxx             pkgs/main/osx-64::libcxx-4.0.1-hcfea43d_1  libcxxabi          pkgs/main/osx-64::libcxxabi-4.0.1-hcfea43d_1  libedit            pkgs/main/osx-64::libedit-3.1.20181209-hb402a30_0  libffi             pkgs/main/osx-64::libffi-3.2.1-h475c297_4  ncurses            pkgs/main/osx-64::ncurses-6.1-h0a44026_1  openssl            pkgs/main/osx-64::openssl-1.1.1c-h1de35cc_1  pip                pkgs/main/osx-64::pip-19.1.1-py37_0  python             pkgs/main/osx-64::python-3.7.3-h359304d_0  readline           pkgs/main/osx-64::readline-7.0-h1de35cc_5  setuptools         pkgs/main/osx-64::setuptools-41.0.1-py37_0  sqlite             pkgs/main/osx-64::sqlite-3.29.0-ha441bb4_0  tk                 pkgs/main/osx-64::tk-8.6.8-ha441bb4_0  wheel              pkgs/main/osx-64::wheel-0.33.4-py37_0  xz                 pkgs/main/osx-64::xz-5.2.4-h1de35cc_4  zlib               pkgs/main/osx-64::zlib-1.2.11-h1de35cc_3</code></pre><p><code>Proceed ([y]/n)?</code></p><p>创建过程中会提示是否安装对应软件包，输入“Y”，则下载及安装软件包。</p><pre class=" language-bash"><code class="language-bash">Downloading and Extracting Packageswheel-0.33.4         <span class="token operator">|</span> 39 KB     <span class="token operator">|</span> <span class="token comment" spellcheck="true">############################################################ | 100% </span>openssl-1.1.1c       <span class="token operator">|</span> 3.4 MB    <span class="token operator">|</span> <span class="token comment" spellcheck="true">############################################################ | 100% </span>certifi-2019.6.16    <span class="token operator">|</span> 154 KB    <span class="token operator">|</span> <span class="token comment" spellcheck="true">############################################################ | 100% </span>setuptools-41.0.1    <span class="token operator">|</span> 635 KB    <span class="token operator">|</span> <span class="token comment" spellcheck="true">############################################################ | 100% </span>pip-19.1.1           <span class="token operator">|</span> 1.8 MB    <span class="token operator">|</span> <span class="token comment" spellcheck="true">############################################################ | 100% </span>sqlite-3.29.0        <span class="token operator">|</span> 2.4 MB    <span class="token operator">|</span> <span class="token comment" spellcheck="true">############################################################ | 100% </span>ca-certificates-2019 <span class="token operator">|</span> 133 KB    <span class="token operator">|</span> <span class="token comment" spellcheck="true">############################################################ | 100% </span>Preparing transaction: <span class="token keyword">done</span>Verifying transaction: <span class="token keyword">done</span>Executing transaction: <span class="token keyword">done</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># To activate this environment, use</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     $ conda activate tf2</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true"># To deactivate an active environment, use</span><span class="token comment" spellcheck="true">#</span><span class="token comment" spellcheck="true">#     $ conda deactivate</span></code></pre><p>虚拟环境<code>tf2</code>创建成功。</p><pre class=" language-bash"><code class="language-bash">conda activate tf2             <span class="token comment" spellcheck="true">#将虚拟环境tf2作为当前的Python环境</span>conda deactivate               <span class="token comment" spellcheck="true">#使用默认的Python环境</span></code></pre><p>如果使用Windows，激活和取消激活虚拟环境的命令如下：</p><pre class=" language-bash"><code class="language-bash">activate tf2deactivate</code></pre></li><li><p><strong>检查Python虚环境是否创建成功</strong></p><p><code>conda info --envs</code></p><p>显示：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># conda environments:</span><span class="token comment" spellcheck="true">#</span>base                  *  /anaconda3tf2                      /anaconda3/envs/tf2</code></pre><p>可以看到，虚环境中多了一个“tf2”，表示创建成功。</p></li><li><p><strong>删除Python虚环境</strong></p><p><code>conda remove --name tf2 --all</code></p><p>运行以上命令即可删除<code>tf2</code>虚拟环境，不会有任何显示。可以使用<code>conda info --envs</code>再次检查虚拟环境情况。</p></li><li><p><strong>在Python虚环境中安装TensorFlow 2.0</strong></p><pre class=" language-bash"><code class="language-bash">conda activate tf2                    <span class="token comment" spellcheck="true">#激活tf2虚拟环境</span>pip <span class="token function">install</span> tensorflow<span class="token operator">==</span>2.0.0-alpha0  <span class="token comment" spellcheck="true">#安装TensorFlow 2.0版</span></code></pre></li><li><p><strong>用工具进行代码版本升级</strong></p><p>在TensorFlow 2.x版本中，提供了一个升级TensorFlow 1.x版本代码的工具——tf_upgrade_v2。该工具可以非常方便地将TensorFlow 1.x版本中编写的代码移植到TensorFlow 2.x中。</p><pre class=" language-bash"><code class="language-bash">tf_upgrade_v2 --infile <span class="token string">"1.x代码文件"</span>  -outfile <span class="token string">"2.x代码文件"</span></code></pre><p>tf_upgrade_v2工具支持单文件转换和多文件批量转换两种方式。</p><ol><li><p>单个代码升级</p><pre class=" language-bash"><code class="language-bash">tf_upgrade_v2 --infile foo_v1.py  --outfile foo_v2.py</code></pre></li><li><p>批量代码升级</p><pre class=" language-bash"><code class="language-bash">tf_upgrade_v2 -intree foo_v1  -outtree foo_v2</code></pre><p>这里的<code>foo_v1</code>指的是1.x代码文件目录，<code>foo_v2</code>指的是升级后的2.x代码文件存放目录。</p><p><strong>需要注意的是tf_upgrade_v2工具并不是万能的，它只能实现基本的API升级。一般在转化完成之后还需要手动二次修改。</strong></p></li></ol></li><li><p><strong>2.x版本对于TF-Hub、T2T等库的影响</strong></p><p>没有影响。这两个库同时支持1.x以及2.x。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> machine learning </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
